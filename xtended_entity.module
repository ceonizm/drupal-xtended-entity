<?php


use Drupal\xtended_entity\Controllers\XtendedNodeController;
use Drupal\xtended_entity\Controllers\XtendedTaxonomyTermController;

/**
 * 
 * @param unknown $infos
 */
function xtended_entity_entity_info_alter( &$infos ) {
  // node
  $ctrlClass = xtended_entity_request_controller_class( "node", XtendedNodeController::class );
  $infos['node']['controller class'] = $ctrlClass;
  $infos['node']['metadata controller class'] = "";
  
  // taxonomy_term
  // let opportunity to other module to define their own controller 
  $ctrlClass = xtended_entity_request_controller_class( "taxonomy_term", XtendedTaxonomyTermController::class );
  $infos['taxonomy_term']['controller class'] = $ctrlClass;
  $infos['taxonomy_term']['metadata controller class'] = "";
}

/**
 * 
 * @param string $entity_type
 * @param string $defaultCtrl
 * @return string
 */
function xtended_entity_request_controller_class( $entity_type, $defaultCtrl ) {
  $message = array('entity_type'=>$entity_type, 'ctrl'=>$defaultCtrl);
  foreach( module_implements( "xtended_entity_choose_controller") as $module ) {
    $func = "{$module}_xtended_entity_choose_controller";
    $func( $message );
  }
  if( $message['ctrl'] != $defaultCtrl ) {
    if( class_exists($message['ctrl'] ) && is_subclass_of($message['ctrl'], $defaultCtrl) ) 
      return $message['ctrl'];
  } 
  return $defaultCtrl;
}
/**
 * implementation of hook_module_implements_alter()
 * ensures that the implementation of hook_entity_info_alter 
 * for this module is the last executed.
 * 
 * @param array $implementations
 * @param string $hook
 * @see hook_module_implements_alter()
 */
function xtended_entity_module_implements_alter( &$implementations, $hook ) {
  if( $hook == 'entity_info_alter' ) {
    $tmp = $implementations['xtended_entity'];
    unset( $implementations['xtended_entity'] );
    $implementations['xtended_entity'] = $tmp;
  }
}



function xtended_entity_theme_registry_alter( &$theme_registry ) {
  
  $original_node = node_theme();

  foreach( array_keys($original_node) as $key ) {
    unset ( $theme_registry[ $key] );
  }
  
  $module = 'node';
  _theme_process_registry($theme_registry, $module, 'module', $module, drupal_get_path('module', $module));

  
  $types = array_keys(entity_crud_get_info());
  $key = array_search( 'node', $types);
  if( $key !== FALSE) unset( $types[$key] );
  $pattern = '(' . implode('|', $types) . ')(\.|__)';
  $theme_registry['entity']['pattern'] = $pattern;

}